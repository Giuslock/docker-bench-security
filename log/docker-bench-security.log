Initializing 2021-06-21T11:48:39+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: interesting_cannon
[1;31m[WARN][0m      * Running as root: practical_buck
[1;31m[WARN][0m      * Running as root: sad_edison
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: interesting_cannon
[1;31m[WARN][0m      * No SecurityOptions Found: practical_buck
[1;31m[WARN][0m      * No SecurityOptions Found: sad_edison
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: interesting_cannon
[1;31m[WARN][0m       * Container running without memory restrictions: practical_buck
[1;31m[WARN][0m       * Container running without memory restrictions: sad_edison
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: interesting_cannon
[1;31m[WARN][0m       * Container running without CPU restrictions: practical_buck
[1;31m[WARN][0m       * Container running without CPU restrictions: sad_edison
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: interesting_cannon
[1;31m[WARN][0m       * Container running with root FS mounted R/W: practical_buck
[1;31m[WARN][0m       * Container running with root FS mounted R/W: sad_edison
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: interesting_cannon
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: practical_buck
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: sad_edison
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: interesting_cannon
[1;34m[INFO][0m       * Container no default ulimit override: practical_buck
[1;34m[INFO][0m       * Container no default ulimit override: sad_edison
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: interesting_cannon
[1;31m[WARN][0m       * Privileges not restricted: practical_buck
[1;31m[WARN][0m       * Privileges not restricted: sad_edison
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: interesting_cannon
[1;31m[WARN][0m       * Health check not set: practical_buck
[1;31m[WARN][0m       * Health check not set: sad_edison
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: interesting_cannon
[1;31m[WARN][0m       * PIDs limit not set: practical_buck
[1;31m[WARN][0m       * PIDs limit not set: sad_edison
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: sad_edison
[1;34m[INFO][0m       * Container in docker0 network: interesting_cannon
[1;34m[INFO][0m       * Container in docker0 network: practical_buck
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)

[1;34m[INFO][0m 6 - Docker Security Operations
[1;34m[INFO][0m 6.1  - Ensure that image sprawl is avoided (Not Scored)
[1;34m[INFO][0m      * There are currently: 4 images
[1;34m[INFO][0m 6.2  - Ensure that container sprawl is avoided (Not Scored)
[1;34m[INFO][0m      * There are currently a total of 18 containers, with 3 of them currently running

[1;34m[INFO][0m 7 - Docker Swarm Configuration
[1;32m[PASS][0m 7.1  - Ensure swarm mode is not Enabled, if not needed (Scored)
[1;32m[PASS][0m 7.2  - Ensure that the minimum number of manager nodes have been created in a swarm (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.3  - Ensure that swarm services are bound to a specific host interface (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.4  - Ensure that all Docker swarm overlay networks are encrypted (Scored)
[1;32m[PASS][0m 7.5  - Ensure that Docker's secret management commands are used for managing secrets in a swarm cluster (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.6  - Ensure that swarm manager is run in auto-lock mode (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.7  - Ensure that the swarm manager auto-lock key is rotated periodically (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.8  - Ensure that node certificates are rotated as appropriate (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.9  - Ensure that CA certificates are rotated as appropriate (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.10  - Ensure that management plane traffic is separated from data plane traffic (Not Scored) (Swarm mode not enabled)

[1;34m[INFO][0m 8 - Docker Enterprise Configuration
[1;34m[INFO][0m   * Community Engine license, skipping section 8


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.

[1;34m[INFO][0m 6 - Docker Security Operations
[1;34m[INFO][0m 6.1 - You should keep only the images that you actually need and establish a workflow to remove old or stale images from the host. Additionally, you should use features such as pull-by-digest to get specific images from the registry. Remediation Impact: docker system prune -a removes all exited containers as well as all images and volumes that are not referenced by running containers, including for UCP and DTR.
[1;34m[INFO][0m 6.2 - You should periodically check your container inventory on each host and clean up containers which are not in active use with the command: docker container prune Remediation Impact: You should retain containers that are actively in use, and delete ones which are no longer needed.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 54
[1;34m[INFO][0m Score: 10

Initializing 2021-06-21T12:41:28+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: intelligent_blackburn
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: intelligent_blackburn
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: intelligent_blackburn
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: intelligent_blackburn
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: intelligent_blackburn
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: intelligent_blackburn
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: intelligent_blackburn
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: intelligent_blackburn
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: intelligent_blackburn
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: intelligent_blackburn
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: intelligent_blackburn
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)

[1;34m[INFO][0m 6 - Docker Security Operations
[1;34m[INFO][0m 6.1  - Ensure that image sprawl is avoided (Not Scored)
[1;34m[INFO][0m      * There are currently: 4 images
[1;34m[INFO][0m 6.2  - Ensure that container sprawl is avoided (Not Scored)
[1;34m[INFO][0m      * There are currently a total of 19 containers, with 1 of them currently running

[1;34m[INFO][0m 7 - Docker Swarm Configuration
[1;32m[PASS][0m 7.1  - Ensure swarm mode is not Enabled, if not needed (Scored)
[1;32m[PASS][0m 7.2  - Ensure that the minimum number of manager nodes have been created in a swarm (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.3  - Ensure that swarm services are bound to a specific host interface (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.4  - Ensure that all Docker swarm overlay networks are encrypted (Scored)
[1;32m[PASS][0m 7.5  - Ensure that Docker's secret management commands are used for managing secrets in a swarm cluster (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.6  - Ensure that swarm manager is run in auto-lock mode (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.7  - Ensure that the swarm manager auto-lock key is rotated periodically (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.8  - Ensure that node certificates are rotated as appropriate (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.9  - Ensure that CA certificates are rotated as appropriate (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.10  - Ensure that management plane traffic is separated from data plane traffic (Not Scored) (Swarm mode not enabled)

[1;34m[INFO][0m 8 - Docker Enterprise Configuration
[1;34m[INFO][0m   * Community Engine license, skipping section 8


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.

[1;34m[INFO][0m 6 - Docker Security Operations
[1;34m[INFO][0m 6.1 - You should keep only the images that you actually need and establish a workflow to remove old or stale images from the host. Additionally, you should use features such as pull-by-digest to get specific images from the registry. Remediation Impact: docker system prune -a removes all exited containers as well as all images and volumes that are not referenced by running containers, including for UCP and DTR.
[1;34m[INFO][0m 6.2 - You should periodically check your container inventory on each host and clean up containers which are not in active use with the command: docker container prune Remediation Impact: You should retain containers that are actively in use, and delete ones which are no longer needed.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 54
[1;34m[INFO][0m Score: 10

Initializing 2021-06-21T13:22:51+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: intelligent_blackburn
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: intelligent_blackburn
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: intelligent_blackburn
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: intelligent_blackburn
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: intelligent_blackburn
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: intelligent_blackburn
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: intelligent_blackburn
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: intelligent_blackburn
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: intelligent_blackburn
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: intelligent_blackburn
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: intelligent_blackburn
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)

[1;34m[INFO][0m 6 - Docker Security Operations
[1;34m[INFO][0m 6.1  - Ensure that image sprawl is avoided (Not Scored)
[1;34m[INFO][0m      * There are currently: 4 images
[1;34m[INFO][0m 6.2  - Ensure that container sprawl is avoided (Not Scored)
[1;34m[INFO][0m      * There are currently a total of 19 containers, with 1 of them currently running

[1;34m[INFO][0m 7 - Docker Swarm Configuration
[1;32m[PASS][0m 7.1  - Ensure swarm mode is not Enabled, if not needed (Scored)
[1;32m[PASS][0m 7.2  - Ensure that the minimum number of manager nodes have been created in a swarm (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.3  - Ensure that swarm services are bound to a specific host interface (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.4  - Ensure that all Docker swarm overlay networks are encrypted (Scored)
[1;32m[PASS][0m 7.5  - Ensure that Docker's secret management commands are used for managing secrets in a swarm cluster (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.6  - Ensure that swarm manager is run in auto-lock mode (Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.7  - Ensure that the swarm manager auto-lock key is rotated periodically (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.8  - Ensure that node certificates are rotated as appropriate (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.9  - Ensure that CA certificates are rotated as appropriate (Not Scored) (Swarm mode not enabled)
[1;32m[PASS][0m 7.10  - Ensure that management plane traffic is separated from data plane traffic (Not Scored) (Swarm mode not enabled)

[1;34m[INFO][0m 8 - Docker Enterprise Configuration
[1;34m[INFO][0m   * Community Engine license, skipping section 8


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.

[1;34m[INFO][0m 6 - Docker Security Operations
[1;34m[INFO][0m 6.1 - You should keep only the images that you actually need and establish a workflow to remove old or stale images from the host. Additionally, you should use features such as pull-by-digest to get specific images from the registry. Remediation Impact: docker system prune -a removes all exited containers as well as all images and volumes that are not referenced by running containers, including for UCP and DTR.
[1;34m[INFO][0m 6.2 - You should periodically check your container inventory on each host and clean up containers which are not in active use with the command: docker container prune Remediation Impact: You should retain containers that are actively in use, and delete ones which are no longer needed.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 54
[1;34m[INFO][0m Score: 10

Initializing 2021-06-21T16:16:31+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: strange_nightingale
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: strange_nightingale
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: strange_nightingale
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: strange_nightingale
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: strange_nightingale
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: strange_nightingale
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: strange_nightingale
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: strange_nightingale
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: strange_nightingale
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: strange_nightingale
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 31
[1;34m[INFO][0m Score: 8

Initializing 2021-06-21T16:20:39+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: strange_saha
[1;31m[WARN][0m      * No SecurityOptions Found: strange_nightingale
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: strange_saha
[1;31m[WARN][0m       * Container running without memory restrictions: strange_nightingale
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: strange_saha
[1;31m[WARN][0m       * Container running without CPU restrictions: strange_nightingale
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: strange_saha
[1;31m[WARN][0m       * Container running with root FS mounted R/W: strange_nightingale
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: strange_saha
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: strange_nightingale
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: strange_saha
[1;34m[INFO][0m       * Container no default ulimit override: strange_nightingale
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: strange_saha
[1;31m[WARN][0m       * Privileges not restricted: strange_nightingale
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: strange_saha
[1;31m[WARN][0m       * Health check not set: strange_nightingale
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: strange_saha
[1;31m[WARN][0m       * PIDs limit not set: strange_nightingale
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: strange_saha
[1;34m[INFO][0m       * Container in docker0 network: strange_nightingale
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 31
[1;34m[INFO][0m Score: 8

Initializing 2021-06-21T16:22:31+02:00


[1;33mSection A - Check results


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 0
[1;34m[INFO][0m Score: 0

Initializing 2021-06-21T16:26:54+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: strange_saha
[1;31m[WARN][0m      * Running as root: strange_nightingale
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: strange_saha
[1;31m[WARN][0m      * No SecurityOptions Found: strange_nightingale
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: strange_saha
[1;31m[WARN][0m       * Container running without memory restrictions: strange_nightingale
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: strange_saha
[1;31m[WARN][0m       * Container running without CPU restrictions: strange_nightingale
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: strange_saha
[1;31m[WARN][0m       * Container running with root FS mounted R/W: strange_nightingale
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: strange_saha
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: strange_nightingale
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: strange_saha
[1;34m[INFO][0m       * Container no default ulimit override: strange_nightingale
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: strange_saha
[1;31m[WARN][0m       * Privileges not restricted: strange_nightingale
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: strange_saha
[1;31m[WARN][0m       * Health check not set: strange_nightingale
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: strange_saha
[1;31m[WARN][0m       * PIDs limit not set: strange_nightingale
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: strange_saha
[1;34m[INFO][0m       * Container in docker0 network: strange_nightingale
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 42
[1;34m[INFO][0m Score: 5

Initializing 2021-08-08T22:07:56+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: vibrant_galois
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: vibrant_galois
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: vibrant_galois
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: vibrant_galois
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vibrant_galois
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vibrant_galois
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: vibrant_galois
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: vibrant_galois
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: vibrant_galois
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: vibrant_galois
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: vibrant_galois
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 42
[1;34m[INFO][0m Score: 5

Initializing 2021-08-26T15:16:44+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 11
[1;34m[INFO][0m Score: -2

Initializing 2021-08-26T16:54:36+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: modest_rosalind
[1;31m[WARN][0m      * Running as root: peaceful_napier
[1;31m[WARN][0m      * Running as root: wizardly_allen
[1;31m[WARN][0m      * Running as root: heuristic_kalam
[1;31m[WARN][0m      * Running as root: gifted_tu
[1;31m[WARN][0m      * Running as root: ecstatic_beaver
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: modest_rosalind
[1;31m[WARN][0m      * No SecurityOptions Found: peaceful_napier
[1;31m[WARN][0m      * No SecurityOptions Found: wizardly_allen
[1;31m[WARN][0m      * No SecurityOptions Found: heuristic_kalam
[1;31m[WARN][0m      * No SecurityOptions Found: gifted_tu
[1;31m[WARN][0m      * No SecurityOptions Found: ecstatic_beaver
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: modest_rosalind
[1;31m[WARN][0m       * Container running without memory restrictions: peaceful_napier
[1;31m[WARN][0m       * Container running without memory restrictions: wizardly_allen
[1;31m[WARN][0m       * Container running without memory restrictions: heuristic_kalam
[1;31m[WARN][0m       * Container running without memory restrictions: gifted_tu
[1;31m[WARN][0m       * Container running without memory restrictions: ecstatic_beaver
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: modest_rosalind
[1;31m[WARN][0m       * Container running without CPU restrictions: peaceful_napier
[1;31m[WARN][0m       * Container running without CPU restrictions: wizardly_allen
[1;31m[WARN][0m       * Container running without CPU restrictions: heuristic_kalam
[1;31m[WARN][0m       * Container running without CPU restrictions: gifted_tu
[1;31m[WARN][0m       * Container running without CPU restrictions: ecstatic_beaver
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: modest_rosalind
[1;31m[WARN][0m       * Container running with root FS mounted R/W: peaceful_napier
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wizardly_allen
[1;31m[WARN][0m       * Container running with root FS mounted R/W: heuristic_kalam
[1;31m[WARN][0m       * Container running with root FS mounted R/W: gifted_tu
[1;31m[WARN][0m       * Container running with root FS mounted R/W: ecstatic_beaver
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: modest_rosalind
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: peaceful_napier
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wizardly_allen
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: heuristic_kalam
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: gifted_tu
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: ecstatic_beaver
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: modest_rosalind
[1;34m[INFO][0m       * Container no default ulimit override: peaceful_napier
[1;34m[INFO][0m       * Container no default ulimit override: wizardly_allen
[1;34m[INFO][0m       * Container no default ulimit override: heuristic_kalam
[1;34m[INFO][0m       * Container no default ulimit override: gifted_tu
[1;34m[INFO][0m       * Container no default ulimit override: ecstatic_beaver
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: modest_rosalind
[1;31m[WARN][0m       * Privileges not restricted: peaceful_napier
[1;31m[WARN][0m       * Privileges not restricted: wizardly_allen
[1;31m[WARN][0m       * Privileges not restricted: heuristic_kalam
[1;31m[WARN][0m       * Privileges not restricted: gifted_tu
[1;31m[WARN][0m       * Privileges not restricted: ecstatic_beaver
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: modest_rosalind
[1;31m[WARN][0m       * Health check not set: peaceful_napier
[1;31m[WARN][0m       * Health check not set: wizardly_allen
[1;31m[WARN][0m       * Health check not set: heuristic_kalam
[1;31m[WARN][0m       * Health check not set: gifted_tu
[1;31m[WARN][0m       * Health check not set: ecstatic_beaver
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: modest_rosalind
[1;31m[WARN][0m       * PIDs limit not set: peaceful_napier
[1;31m[WARN][0m       * PIDs limit not set: wizardly_allen
[1;31m[WARN][0m       * PIDs limit not set: heuristic_kalam
[1;31m[WARN][0m       * PIDs limit not set: gifted_tu
[1;31m[WARN][0m       * PIDs limit not set: ecstatic_beaver
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: heuristic_kalam
[1;34m[INFO][0m       * Container in docker0 network: peaceful_napier
[1;34m[INFO][0m       * Container in docker0 network: gifted_tu
[1;34m[INFO][0m       * Container in docker0 network: ecstatic_beaver
[1;34m[INFO][0m       * Container in docker0 network: modest_rosalind
[1;34m[INFO][0m       * Container in docker0 network: wizardly_allen
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 42
[1;34m[INFO][0m Score: 5

Initializing 2021-09-10T13:28:53+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 11
[1;34m[INFO][0m Score: -2

Initializing 2021-09-10T13:48:41+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 11
[1;34m[INFO][0m Score: -2

Initializing 2021-09-10T16:54:00+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Score[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-10T16:55:00+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-10T17:06:16+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: tender_buck
[1;31m[WARN][0m      * Running as root: elated_snyder
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: tender_buck
[1;31m[WARN][0m      * No SecurityOptions Found: elated_snyder
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: tender_buck
[1;31m[WARN][0m       * Container running without memory restrictions: elated_snyder
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: tender_buck
[1;31m[WARN][0m       * Container running without CPU restrictions: elated_snyder
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: tender_buck
[1;31m[WARN][0m       * Container running with root FS mounted R/W: elated_snyder
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: tender_buck
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: elated_snyder
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: tender_buck
[1;34m[INFO][0m       * Container no default ulimit override: elated_snyder
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: tender_buck
[1;31m[WARN][0m       * Privileges not restricted: elated_snyder
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: tender_buck
[1;31m[WARN][0m       * Health check not set: elated_snyder
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: tender_buck
[1;31m[WARN][0m       * PIDs limit not set: elated_snyder
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: tender_buck
[1;34m[INFO][0m       * Container in docker0 network: elated_snyder
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-10T17:10:12+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: tender_buck
[1;31m[WARN][0m      * Running as root: elated_snyder
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: tender_buck
[1;31m[WARN][0m      * No SecurityOptions Found: elated_snyder
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: tender_buck
[1;31m[WARN][0m       * Container running without memory restrictions: elated_snyder
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: tender_buck
[1;31m[WARN][0m       * Container running without CPU restrictions: elated_snyder
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: tender_buck
[1;31m[WARN][0m       * Container running with root FS mounted R/W: elated_snyder
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: tender_buck
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: elated_snyder
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: tender_buck
[1;34m[INFO][0m       * Container no default ulimit override: elated_snyder
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: tender_buck
[1;31m[WARN][0m       * Privileges not restricted: elated_snyder
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: tender_buck
[1;31m[WARN][0m       * Health check not set: elated_snyder
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: tender_buck
[1;31m[WARN][0m       * PIDs limit not set: elated_snyder
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: tender_buck
[1;34m[INFO][0m       * Container in docker0 network: elated_snyder
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-10T17:12:27+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: charming_merkle
[1;31m[WARN][0m      * Running as root: musing_goldwasser
[1;31m[WARN][0m      * Running as root: sleepy_williamson
[1;31m[WARN][0m      * Running as root: tender_buck
[1;31m[WARN][0m      * Running as root: elated_snyder
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: charming_merkle
[1;31m[WARN][0m      * No SecurityOptions Found: musing_goldwasser
[1;31m[WARN][0m      * No SecurityOptions Found: sleepy_williamson
[1;31m[WARN][0m      * No SecurityOptions Found: tender_buck
[1;31m[WARN][0m      * No SecurityOptions Found: elated_snyder
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: charming_merkle
[1;31m[WARN][0m       * Container running without memory restrictions: musing_goldwasser
[1;31m[WARN][0m       * Container running without memory restrictions: sleepy_williamson
[1;31m[WARN][0m       * Container running without memory restrictions: tender_buck
[1;31m[WARN][0m       * Container running without memory restrictions: elated_snyder
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: charming_merkle
[1;31m[WARN][0m       * Container running without CPU restrictions: musing_goldwasser
[1;31m[WARN][0m       * Container running without CPU restrictions: sleepy_williamson
[1;31m[WARN][0m       * Container running without CPU restrictions: tender_buck
[1;31m[WARN][0m       * Container running without CPU restrictions: elated_snyder
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: charming_merkle
[1;31m[WARN][0m       * Container running with root FS mounted R/W: musing_goldwasser
[1;31m[WARN][0m       * Container running with root FS mounted R/W: sleepy_williamson
[1;31m[WARN][0m       * Container running with root FS mounted R/W: tender_buck
[1;31m[WARN][0m       * Container running with root FS mounted R/W: elated_snyder
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: charming_merkle
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: musing_goldwasser
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: sleepy_williamson
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: tender_buck
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: elated_snyder
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: charming_merkle
[1;34m[INFO][0m       * Container no default ulimit override: musing_goldwasser
[1;34m[INFO][0m       * Container no default ulimit override: sleepy_williamson
[1;34m[INFO][0m       * Container no default ulimit override: tender_buck
[1;34m[INFO][0m       * Container no default ulimit override: elated_snyder
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: charming_merkle
[1;31m[WARN][0m       * Privileges not restricted: musing_goldwasser
[1;31m[WARN][0m       * Privileges not restricted: sleepy_williamson
[1;31m[WARN][0m       * Privileges not restricted: tender_buck
[1;31m[WARN][0m       * Privileges not restricted: elated_snyder
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: charming_merkle
[1;31m[WARN][0m       * Health check not set: musing_goldwasser
[1;31m[WARN][0m       * Health check not set: sleepy_williamson
[1;31m[WARN][0m       * Health check not set: tender_buck
[1;31m[WARN][0m       * Health check not set: elated_snyder
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: charming_merkle
[1;31m[WARN][0m       * PIDs limit not set: musing_goldwasser
[1;31m[WARN][0m       * PIDs limit not set: sleepy_williamson
[1;31m[WARN][0m       * PIDs limit not set: tender_buck
[1;31m[WARN][0m       * PIDs limit not set: elated_snyder
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: musing_goldwasser
[1;34m[INFO][0m       * Container in docker0 network: tender_buck
[1;34m[INFO][0m       * Container in docker0 network: charming_merkle
[1;34m[INFO][0m       * Container in docker0 network: sleepy_williamson
[1;34m[INFO][0m       * Container in docker0 network: elated_snyder
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-14T16:39:07+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: affectionate_wilbur
[1;31m[WARN][0m      * Running as root: silly_keller
[1;31m[WARN][0m      * Running as root: affectionate_robinson
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: affectionate_wilbur
[1;31m[WARN][0m      * No SecurityOptions Found: silly_keller
[1;31m[WARN][0m      * No SecurityOptions Found: affectionate_robinson
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: affectionate_wilbur
[1;31m[WARN][0m       * Container running without memory restrictions: silly_keller
[1;31m[WARN][0m       * Container running without memory restrictions: affectionate_robinson
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: affectionate_wilbur
[1;31m[WARN][0m       * Container running without CPU restrictions: silly_keller
[1;31m[WARN][0m       * Container running without CPU restrictions: affectionate_robinson
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: affectionate_wilbur
[1;31m[WARN][0m       * Container running with root FS mounted R/W: silly_keller
[1;31m[WARN][0m       * Container running with root FS mounted R/W: affectionate_robinson
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: affectionate_wilbur
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: silly_keller
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: affectionate_robinson
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: affectionate_wilbur
[1;34m[INFO][0m       * Container no default ulimit override: silly_keller
[1;34m[INFO][0m       * Container no default ulimit override: affectionate_robinson
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: affectionate_wilbur
[1;31m[WARN][0m       * Privileges not restricted: silly_keller
[1;31m[WARN][0m       * Privileges not restricted: affectionate_robinson
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: affectionate_wilbur
[1;31m[WARN][0m       * Health check not set: silly_keller
[1;31m[WARN][0m       * Health check not set: affectionate_robinson
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: affectionate_wilbur
[1;31m[WARN][0m       * PIDs limit not set: silly_keller
[1;31m[WARN][0m       * PIDs limit not set: affectionate_robinson
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: silly_keller
[1;34m[INFO][0m       * Container in docker0 network: affectionate_robinson
[1;34m[INFO][0m       * Container in docker0 network: affectionate_wilbur
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T12:17:33+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: cool_mendeleev
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: cool_mendeleev
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: cool_mendeleev
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: cool_mendeleev
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: cool_mendeleev
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: cool_mendeleev
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: cool_mendeleev
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: cool_mendeleev
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: cool_mendeleev
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: cool_mendeleev
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: cool_mendeleev
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T15:52:16+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T15:52:43+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
Initializing 2021-09-28T15:53:57+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:10:17+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:10:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:13:10+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:16:26+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:26:17+02:00


[1;33mSection A - Check results
Initializing 2021-09-28T16:26:58+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:46:56+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: frosty_diffie
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: frosty_diffie
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: frosty_diffie
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: frosty_diffie
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: frosty_diffie
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: frosty_diffie
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: frosty_diffie
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: frosty_diffie
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;34m[INFO][0m       * Container in docker0 network: frosty_diffie
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:54:09+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: frosty_diffie
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: frosty_diffie
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: frosty_diffie
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: frosty_diffie
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: frosty_diffie
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: frosty_diffie
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: frosty_diffie
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: frosty_diffie
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;34m[INFO][0m       * Container in docker0 network: frosty_diffie
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T16:57:13+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: frosty_diffie
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: frosty_diffie
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: frosty_diffie
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: frosty_diffie
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: frosty_diffie
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: frosty_diffie
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: frosty_diffie
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: frosty_diffie
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;34m[INFO][0m       * Container in docker0 network: frosty_diffie
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T17:07:18+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: frosty_diffie
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: frosty_diffie
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: frosty_diffie
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: frosty_diffie
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: frosty_diffie
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: frosty_diffie
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: frosty_diffie
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: frosty_diffie
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;34m[INFO][0m       * Container in docker0 network: frosty_diffie
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T17:08:21+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: zealous_matsumoto
[1;31m[WARN][0m      * Running as root: hopeful_almeida
[1;31m[WARN][0m      * Running as root: frosty_diffie
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: zealous_matsumoto
[1;31m[WARN][0m      * No SecurityOptions Found: hopeful_almeida
[1;31m[WARN][0m      * No SecurityOptions Found: frosty_diffie
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: zealous_matsumoto
[1;31m[WARN][0m       * Container running without memory restrictions: hopeful_almeida
[1;31m[WARN][0m       * Container running without memory restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: zealous_matsumoto
[1;31m[WARN][0m       * Container running with root FS mounted R/W: hopeful_almeida
[1;31m[WARN][0m       * Container running with root FS mounted R/W: frosty_diffie
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: zealous_matsumoto
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: hopeful_almeida
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: frosty_diffie
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: zealous_matsumoto
[1;34m[INFO][0m       * Container no default ulimit override: hopeful_almeida
[1;34m[INFO][0m       * Container no default ulimit override: frosty_diffie
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: zealous_matsumoto
[1;31m[WARN][0m       * Privileges not restricted: hopeful_almeida
[1;31m[WARN][0m       * Privileges not restricted: frosty_diffie
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: zealous_matsumoto
[1;31m[WARN][0m       * Health check not set: hopeful_almeida
[1;31m[WARN][0m       * Health check not set: frosty_diffie
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: zealous_matsumoto
[1;31m[WARN][0m       * PIDs limit not set: hopeful_almeida
[1;31m[WARN][0m       * PIDs limit not set: frosty_diffie
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;34m[INFO][0m       * Container in docker0 network: zealous_matsumoto
[1;34m[INFO][0m       * Container in docker0 network: frosty_diffie
[1;34m[INFO][0m       * Container in docker0 network: hopeful_almeida
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T17:08:51+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: zealous_matsumoto
[1;31m[WARN][0m      * Running as root: hopeful_almeida
[1;31m[WARN][0m      * Running as root: frosty_diffie
[1;31m[WARN][0m      * Running as root: wonderful_herschel
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: zealous_matsumoto
[1;31m[WARN][0m      * No SecurityOptions Found: hopeful_almeida
[1;31m[WARN][0m      * No SecurityOptions Found: frosty_diffie
[1;31m[WARN][0m      * No SecurityOptions Found: wonderful_herschel
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: zealous_matsumoto
[1;31m[WARN][0m       * Container running without memory restrictions: hopeful_almeida
[1;31m[WARN][0m       * Container running without memory restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without memory restrictions: wonderful_herschel
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: frosty_diffie
[1;31m[WARN][0m       * Container running without CPU restrictions: wonderful_herschel
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: zealous_matsumoto
[1;31m[WARN][0m       * Container running with root FS mounted R/W: hopeful_almeida
[1;31m[WARN][0m       * Container running with root FS mounted R/W: frosty_diffie
[1;31m[WARN][0m       * Container running with root FS mounted R/W: wonderful_herschel
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: zealous_matsumoto
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: hopeful_almeida
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: frosty_diffie
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: wonderful_herschel
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: zealous_matsumoto
[1;34m[INFO][0m       * Container no default ulimit override: hopeful_almeida
[1;34m[INFO][0m       * Container no default ulimit override: frosty_diffie
[1;34m[INFO][0m       * Container no default ulimit override: wonderful_herschel
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: zealous_matsumoto
[1;31m[WARN][0m       * Privileges not restricted: hopeful_almeida
[1;31m[WARN][0m       * Privileges not restricted: frosty_diffie
[1;31m[WARN][0m       * Privileges not restricted: wonderful_herschel
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: zealous_matsumoto
[1;31m[WARN][0m       * Health check not set: hopeful_almeida
[1;31m[WARN][0m       * Health check not set: frosty_diffie
[1;31m[WARN][0m       * Health check not set: wonderful_herschel
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: zealous_matsumoto
[1;31m[WARN][0m       * PIDs limit not set: hopeful_almeida
[1;31m[WARN][0m       * PIDs limit not set: frosty_diffie
[1;31m[WARN][0m       * PIDs limit not set: wonderful_herschel
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: wonderful_herschel
[1;34m[INFO][0m       * Container in docker0 network: zealous_matsumoto
[1;34m[INFO][0m       * Container in docker0 network: frosty_diffie
[1;34m[INFO][0m       * Container in docker0 network: hopeful_almeida
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T17:58:01+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: fervent_antonelli
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: fervent_antonelli
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: fervent_antonelli
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: fervent_antonelli
[1;31m[WARN][0m       * Container running without CPU restrictions: fervent_antonelli
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: fervent_antonelli
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: fervent_antonelli
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: fervent_antonelli
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: fervent_antonelli
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: fervent_antonelli
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: fervent_antonelli
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: fervent_antonelli
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T17:58:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: fervent_antonelli
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: fervent_antonelli
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: fervent_antonelli
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: fervent_antonelli
[1;31m[WARN][0m       * Container running without CPU restrictions: fervent_antonelli
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: fervent_antonelli
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: fervent_antonelli
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: fervent_antonelli
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: fervent_antonelli
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: fervent_antonelli
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: fervent_antonelli
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: fervent_antonelli
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:33:39+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: kind_hypatia
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: kind_hypatia
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: kind_hypatia
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: kind_hypatia
[1;31m[WARN][0m       * Container running without CPU restrictions: kind_hypatia
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: kind_hypatia
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: kind_hypatia
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: kind_hypatia
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: kind_hypatia
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: kind_hypatia
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: kind_hypatia
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: kind_hypatia
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:42:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T19:44:43+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T19:48:09+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T19:48:46+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T19:50:29+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:52:06+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:52:21+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:52:28+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:52:49+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T19:55:16+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T20:02:29+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: optimistic_meninsky
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: agitated_davinci
[1;31m[WARN][0m      * No SecurityOptions Found: optimistic_meninsky
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: agitated_davinci
[1;31m[WARN][0m       * Container running without memory restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: agitated_davinci
[1;31m[WARN][0m       * Container running without CPU restrictions: agitated_davinci
[1;31m[WARN][0m       * Container running without CPU restrictions: optimistic_meninsky
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: agitated_davinci
[1;31m[WARN][0m       * Container running with root FS mounted R/W: optimistic_meninsky
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: agitated_davinci
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: optimistic_meninsky
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: agitated_davinci
[1;34m[INFO][0m       * Container no default ulimit override: optimistic_meninsky
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: agitated_davinci
[1;31m[WARN][0m       * Privileges not restricted: optimistic_meninsky
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: agitated_davinci
[1;31m[WARN][0m       * Health check not set: optimistic_meninsky
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: agitated_davinci
[1;31m[WARN][0m       * PIDs limit not set: optimistic_meninsky
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: optimistic_meninsky
[1;34m[INFO][0m       * Container in docker0 network: agitated_davinci
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-28T20:09:43+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T20:11:09+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-28T20:20:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-29T11:50:34+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: dazzling_merkle
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: dazzling_merkle
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: dazzling_merkle
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: dazzling_merkle
[1;31m[WARN][0m       * Container running without CPU restrictions: dazzling_merkle
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: dazzling_merkle
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: dazzling_merkle
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: dazzling_merkle
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: dazzling_merkle
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: dazzling_merkle
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: dazzling_merkle
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: dazzling_merkle
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T12:26:22+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: dazzling_merkle
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: dazzling_merkle
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: dazzling_merkle
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: dazzling_merkle
[1;31m[WARN][0m       * Container running without CPU restrictions: dazzling_merkle
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: dazzling_merkle
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: dazzling_merkle
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: dazzling_merkle
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: dazzling_merkle
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: dazzling_merkle
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: dazzling_merkle
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: dazzling_merkle
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T12:30:18+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: dreamy_gagarin
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: dreamy_gagarin
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: dreamy_gagarin
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: dreamy_gagarin
[1;31m[WARN][0m       * Container running without CPU restrictions: dreamy_gagarin
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: dreamy_gagarin
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: dreamy_gagarin
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: dreamy_gagarin
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: dreamy_gagarin
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: dreamy_gagarin
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: dreamy_gagarin
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: dreamy_gagarin
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T12:31:15+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: dreamy_gagarin
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: dreamy_gagarin
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: dreamy_gagarin
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: dreamy_gagarin
[1;31m[WARN][0m       * Container running without CPU restrictions: dreamy_gagarin
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: dreamy_gagarin
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: dreamy_gagarin
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: dreamy_gagarin
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: dreamy_gagarin
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: dreamy_gagarin
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: dreamy_gagarin
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: dreamy_gagarin
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T12:35:13+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: dreamy_gagarin
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: dreamy_gagarin
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: dreamy_gagarin
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: dreamy_gagarin
[1;31m[WARN][0m       * Container running without CPU restrictions: dreamy_gagarin
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: dreamy_gagarin
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: dreamy_gagarin
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: dreamy_gagarin
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: dreamy_gagarin
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: dreamy_gagarin
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: dreamy_gagarin
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: dreamy_gagarin
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T12:57:51+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: nostalgic_tereshkova
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: nostalgic_tereshkova
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: nostalgic_tereshkova
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: nostalgic_tereshkova
[1;31m[WARN][0m       * Container running without CPU restrictions: nostalgic_tereshkova
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: nostalgic_tereshkova
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: nostalgic_tereshkova
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: nostalgic_tereshkova
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: nostalgic_tereshkova
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: nostalgic_tereshkova
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: nostalgic_tereshkova
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: nostalgic_tereshkova
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T13:00:49+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: nostalgic_tereshkova
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: nostalgic_tereshkova
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: nostalgic_tereshkova
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: nostalgic_tereshkova
[1;31m[WARN][0m       * Container running without CPU restrictions: nostalgic_tereshkova
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: nostalgic_tereshkova
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: nostalgic_tereshkova
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: nostalgic_tereshkova
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: nostalgic_tereshkova
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: nostalgic_tereshkova
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: nostalgic_tereshkova
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: nostalgic_tereshkova
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T13:02:35+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: nostalgic_tereshkova
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: nostalgic_tereshkova
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: nostalgic_tereshkova
[1;32m[PASS][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: nostalgic_tereshkova
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;32m[PASS][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: nostalgic_tereshkova
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: nostalgic_tereshkova
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: nostalgic_tereshkova
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;32m[PASS][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: nostalgic_tereshkova
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T13:03:43+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: nice_perlman
[1;31m[WARN][0m      * Running as root: nostalgic_tereshkova
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: a9cf7328760a
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: nostalgic_tereshkova
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: nice_perlman
[1;31m[WARN][0m       * Container running without memory restrictions: nostalgic_tereshkova
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: nice_perlman
[1;31m[WARN][0m       * Container running without CPU restrictions: nice_perlman
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: nostalgic_tereshkova
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: nice_perlman
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: nice_perlman
[1;34m[INFO][0m       * Container no default ulimit override: nostalgic_tereshkova
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: nostalgic_tereshkova
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: nice_perlman
[1;31m[WARN][0m       * Health check not set: nostalgic_tereshkova
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: nice_perlman
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: nice_perlman
[1;34m[INFO][0m       * Container in docker0 network: nostalgic_tereshkova
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T13:57:41+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;32m[PASS][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [foo:latest]
[1;31m[WARN][0m      * No Healthcheck found: c656a6fd5b15
[1;31m[WARN][0m      * No Healthcheck found: [wordpress:latest]
[1;31m[WARN][0m      * No Healthcheck found: [redis:latest]
[1;31m[WARN][0m      * No Healthcheck found: [nginx:latest]
[1;31m[WARN][0m      * No Healthcheck found: [mysql:latest]
[1;31m[WARN][0m      * No Healthcheck found: [debian:latest]
[1;31m[WARN][0m      * No Healthcheck found: [alpine:latest]
[1;31m[WARN][0m      * No Healthcheck found: [ubuntu:latest]
[1;31m[WARN][0m      * No Healthcheck found: [hello-world:latest]
[1;34m[INFO][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;34m[INFO][0m      * Update instruction found: [wordpress:latest]
[1;34m[INFO][0m      * Update instruction found: [mysql:latest]
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: newcont
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: newcont
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: newcont
[1;31m[WARN][0m       * Container running without CPU restrictions: newcont
[1;32m[PASS][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: newcont
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: newcont
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: newcont
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: newcont
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: newcont
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: newcont
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.7 - You should use update instructions together with install instructions and version pinning for packages while installing them. This prevent caching and force the extraction of the required versions. Alternatively, you could use the --no-cache flag during the docker build process to avoid using cached layers. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T15:45:09+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: infallible_lovelace
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine1:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_lovelace
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_lovelace
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_lovelace
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_lovelace
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_lovelace
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: infallible_lovelace
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: infallible_lovelace
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: infallible_lovelace
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: infallible_lovelace
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: infallible_lovelace
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: infallible_lovelace
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T15:47:57+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: infallible_lovelace
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine1:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_lovelace
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_lovelace
[1;32m[PASS][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_lovelace
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;32m[PASS][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: infallible_lovelace
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: infallible_lovelace
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: infallible_lovelace
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;32m[PASS][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: infallible_lovelace
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T15:52:16+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: infallible_lovelace
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine1:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_lovelace
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_lovelace
[1;32m[PASS][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_lovelace
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;32m[PASS][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: infallible_lovelace
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: infallible_lovelace
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: infallible_lovelace
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;32m[PASS][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: infallible_lovelace
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T17:33:29+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: inspiring_sinoussi
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: inspiring_sinoussi
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: inspiring_sinoussi
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_sinoussi
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_sinoussi
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: inspiring_sinoussi
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: inspiring_sinoussi
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: inspiring_sinoussi
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: inspiring_sinoussi
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: inspiring_sinoussi
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: inspiring_sinoussi
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: inspiring_sinoussi
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T19:43:52+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: friendly_williamson
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine2:latest]
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: friendly_williamson
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: friendly_williamson
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: friendly_williamson
[1;31m[WARN][0m       * Container running without CPU restrictions: friendly_williamson
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: friendly_williamson
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: friendly_williamson
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: friendly_williamson
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: friendly_williamson
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: friendly_williamson
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: friendly_williamson
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: friendly_williamson
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-29T19:44:52+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;31m[WARN][0m      * Running as root: friendly_williamson
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine2:latest]
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: friendly_williamson
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: friendly_williamson
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: friendly_williamson
[1;31m[WARN][0m       * Container running without CPU restrictions: friendly_williamson
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: friendly_williamson
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: friendly_williamson
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: friendly_williamson
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: friendly_williamson
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: friendly_williamson
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: friendly_williamson
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: friendly_williamson
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m 5.2 - Set the SELinux State. Set the SELinux Policy. Create or import a SELinux policy template for Docker containers. Start Docker in daemon mode with SELinux enabled. Start your Docker container using the security options. Remediation Impact: Any restrictions defined in the SELinux policy will be applied to your containers. It should be noted that if your SELinux policy is misconfigured, this may have an impact on the correct operation of the affected containers.
[1;34m[INFO][0m 5.8 - You should ensure that the Dockerfile for each container image only exposes needed ports. Remediation Impact: None.
[1;34m[INFO][0m 5.10 - You should run the container with only as much memory as it requires by using the --memory argument. Remediation Impact: If correct memory limits are not set on each container, one process can expand its usage and cause other containers to run out of resources.
[1;34m[INFO][0m 5.11 - You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the --cpu-shares argument. Remediation Impact: If you do not correctly assign CPU thresholds, the container process may run out of resources and become unresponsive. If CPU resources on the host are not constrainted, CPU shares do not place any restrictions on individual resources.
[1;34m[INFO][0m 5.12 - You should add a --read-only flag at a container's runtime to enforce the container's root filesystem being mounted as read only. Remediation Impact: Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined. You should define what the container's data should and should not persist at runtime in order to decide which strategy to use.
[1;34m[INFO][0m 5.14 - If you wish a container to be automatically restarted, a sample command is docker run --detach --restart=on-failure:5 nginx Remediation Impact: If this option is set, a container will only attempt to restart itself 5 times.
[1;34m[INFO][0m 5.18 - You should only override the default ulimit settings if needed in a specific case. Remediation Impact: If ulimits are not set correctly, overutilization by individual containers could make the host system unusable.
[1;34m[INFO][0m 5.22 - You should not use the --privileged option in docker exec commands. Remediation Impact: If you need enhanced capabilities within a container, then run it with all the permissions it requires. These should be specified individually.
[1;34m[INFO][0m 5.23 - You should not use the --user=root option in docker exec commands. Remediation Impact: None.
[1;34m[INFO][0m 5.25 - You should start your container with the options: docker run --rm -it --security-opt=no-new-privileges ubuntu bash Remediation Impact: The no_new_priv option prevents LSMs like SELinux from allowing processes to acquire new privileges.
[1;34m[INFO][0m 5.26 - You should run the container using the --health-cmd parameter. Remediation Impact: None.
[1;34m[INFO][0m 5.27 - You should use proper version pinning mechanisms (the <latest> tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements. Remediation Impact: None.
[1;34m[INFO][0m 5.28 - Use --pids-limit flag with an appropriate value when launching the container. Remediation Impact: Set the PIDs limit value as appropriate. Incorrect values might leave containers unusable.
[1;34m[INFO][0m 5.29 - You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network. Remediation Impact: User-defined networks need to be configured and managed in line with organizational security policy.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-30T17:37:47+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine2:latest]
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;31m[WARN][0m      * No Healthcheck found: 0f6d8486c45c
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection B - Remediation measures[0m

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1 - You should ensure that the Dockerfile for each container image contains the information: USER <username or ID>. If there is no specific user created in the container base image, then make use of the useradd command to add a specific user before the USER instruction in the Dockerfile. Remediation Impact: Running as a non-root user can present challenges where you wish to bind mount volumes from the underlying host. In this case, care should be taken to ensure that the user running the contained process can read and write to the bound directory, according to their requirements.
[1;34m[INFO][0m 4.2 - Configure and use Docker Content trust. View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it. Scan Docker images for vulnerabilities at regular intervals. Use the commands docker history <imageName> and docker image scan <imageName> Remediation Impact: None.
[1;34m[INFO][0m 4.3 - You should not install anything within the container that is not required. You should consider using a minimal base image if you can. Some of the options available include BusyBox and Alpine. Not only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack. Remediation Impact: None.
[1;34m[INFO][0m 4.4 - Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images. Remediation Impact: None.
[1;34m[INFO][0m 4.5 - Add DOCKER_CONTENT_TRUST variable to the /etc/environment file using command echo DOCKER_CONTENT_TRUST=1 | sudo tee -a /etc/environment. Remediation Impact: This prevents users from working with tagged images unless they contain a signature.
[1;34m[INFO][0m 4.6 - You should follow the Docker documentation and rebuild your container images to include the HEALTHCHECK instruction. Remediation Impact: None.
[1;34m[INFO][0m 4.8 - You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile: RUN find / -perm /6000 -type f -exec chmod a-s {} ; || true Remediation Impact: The above command would break all executables that depend on setuid or setgid permissions including legitimate ones. You should therefore be careful to modify the command to suit your requirements so that it does not reduce the permissions of legitimate programs excessively. Because of this, you should exercise a degree of caution and examine all processes carefully before making this type of modification in order to avoid outages.
[1;34m[INFO][0m 4.10 - Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker. Remediation Impact: A proper secrets management process will be required for Docker image building.
[1;34m[INFO][0m 4.11 - You should use a secure package distribution mechanism of your choice to ensure the authenticity of software packages. Remediation Impact: None.


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-09-30T17:47:54+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;32m[PASS][0m 4.1  - Ensure that a user for the container has been created (Scored)
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images (Not Scored)
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container (Not Scored)
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches (Not Scored)
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled (Scored)
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images (Scored)
[1;31m[WARN][0m      * No Healthcheck found: [immagine2:latest]
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;31m[WARN][0m      * No Healthcheck found: 0f6d8486c45c
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile (Not Scored)
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed (Not Scored)
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles (Not Scored)
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed (Not Scored)

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: festive_burnell
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: festive_burnell
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: festive_burnell
[1;31m[WARN][0m       * Container running without CPU restrictions: festive_burnell
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: festive_burnell
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: festive_burnell
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: festive_burnell
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: festive_burnell
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: festive_burnell
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: festive_burnell
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: festive_burnell
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-09-30T18:20:59+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;32m[PASS][0m 4.1  - Ensure that a user for the container has been created
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: [immagine2:latest]
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;31m[WARN][0m      * No Healthcheck found: 0f6d8486c45c
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: festive_burnell
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: festive_burnell
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: festive_burnell
[1;31m[WARN][0m       * Container running without CPU restrictions: festive_burnell
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: festive_burnell
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: festive_burnell
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: festive_burnell
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: festive_burnell
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: festive_burnell
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: festive_burnell
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: festive_burnell
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-01T12:35:05+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: eloquent_haibt
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: eloquent_haibt
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: eloquent_haibt
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: eloquent_haibt
[1;31m[WARN][0m       * Container running without CPU restrictions: eloquent_haibt
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: eloquent_haibt
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: eloquent_haibt
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: eloquent_haibt
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: eloquent_haibt
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: eloquent_haibt
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: eloquent_haibt
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: eloquent_haibt
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-01T13:06:10+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: eloquent_haibt
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: eloquent_haibt
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: eloquent_haibt
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: eloquent_haibt
[1;31m[WARN][0m       * Container running without CPU restrictions: eloquent_haibt
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: eloquent_haibt
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: eloquent_haibt
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: eloquent_haibt
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: eloquent_haibt
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: eloquent_haibt
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: eloquent_haibt
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: eloquent_haibt
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-01T13:08:21+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: eloquent_haibt
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled (Scored)
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set (Scored)
[1;31m[WARN][0m      * No SecurityOptions Found: eloquent_haibt
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers (Scored)
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used (Scored)
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers (Scored)
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers (Scored)
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers (Scored)
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container (Not Scored)
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared (Scored)
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited (Scored)
[1;31m[WARN][0m       * Container running without memory restrictions: eloquent_haibt
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers (Scored)
[1;31m[WARN][0m       * Container running without CPU restrictions: eloquent_haibt
[1;31m[WARN][0m       * Container running without CPU restrictions: eloquent_haibt
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only (Scored)
[1;31m[WARN][0m       * Container running with root FS mounted R/W: eloquent_haibt
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface (Scored)
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5' (Scored)
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: eloquent_haibt
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared (Scored)
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared (Scored)
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers (Not Scored)
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed (Not Scored)
[1;34m[INFO][0m       * Container no default ulimit override: eloquent_haibt
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared (Scored)
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared (Scored)
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled (Scored)
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option (Scored)
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option (Not Scored)
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed (Scored)
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges (Scored)
[1;31m[WARN][0m       * Privileges not restricted: eloquent_haibt
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime (Scored)
[1;31m[WARN][0m       * Health check not set: eloquent_haibt
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image (Not Scored)
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used (Scored)
[1;31m[WARN][0m       * PIDs limit not set: eloquent_haibt
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used (Not Scored)
[1;34m[INFO][0m       * Container in docker0 network: eloquent_haibt
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared (Scored)
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers (Scored)


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-02T15:02:34+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-10-02T15:03:29+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: infallible_archimedes
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_archimedes
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_archimedes
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_archimedes
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: infallible_archimedes
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: infallible_archimedes
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: infallible_archimedes
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: infallible_archimedes
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: infallible_archimedes
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: infallible_archimedes
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-03T17:33:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: infallible_archimedes
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_archimedes
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_archimedes
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_archimedes
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: infallible_archimedes
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: infallible_archimedes
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: infallible_archimedes
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: infallible_archimedes
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: infallible_archimedes
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: infallible_archimedes
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-03T17:50:07+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: infallible_archimedes
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_archimedes
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_archimedes
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_archimedes
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: infallible_archimedes
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: infallible_archimedes
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: infallible_archimedes
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: infallible_archimedes
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: infallible_archimedes
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: infallible_archimedes
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-03T19:54:12+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: infallible_archimedes
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: infallible_archimedes
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: infallible_archimedes
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m       * Container running without CPU restrictions: infallible_archimedes
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: infallible_archimedes
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: infallible_archimedes
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: infallible_archimedes
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: infallible_archimedes
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: infallible_archimedes
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: infallible_archimedes
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: infallible_archimedes
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T15:25:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-10-04T15:26:04+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: vigorous_goldstine
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: vigorous_goldstine
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vigorous_goldstine
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vigorous_goldstine
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: vigorous_goldstine
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: vigorous_goldstine
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: vigorous_goldstine
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: vigorous_goldstine
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: vigorous_goldstine
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T15:26:47+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: vigorous_goldstine
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: vigorous_goldstine
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vigorous_goldstine
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vigorous_goldstine
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: vigorous_goldstine
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: vigorous_goldstine
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: vigorous_goldstine
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: vigorous_goldstine
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: vigorous_goldstine
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T15:27:37+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: vigorous_goldstine
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: vigorous_goldstine
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vigorous_goldstine
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vigorous_goldstine
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: vigorous_goldstine
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: vigorous_goldstine
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: vigorous_goldstine
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: vigorous_goldstine
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: vigorous_goldstine
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T15:28:02+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: vigorous_goldstine
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: vigorous_goldstine
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vigorous_goldstine
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vigorous_goldstine
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: vigorous_goldstine
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: vigorous_goldstine
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: vigorous_goldstine
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: vigorous_goldstine
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: vigorous_goldstine
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T15:30:10+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: vigorous_goldstine
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: vigorous_goldstine
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vigorous_goldstine
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vigorous_goldstine
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: vigorous_goldstine
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: vigorous_goldstine
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: vigorous_goldstine
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: vigorous_goldstine
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: vigorous_goldstine
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T18:06:13+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: vigorous_goldstine
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: vigorous_goldstine
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m       * Container running without CPU restrictions: vigorous_goldstine
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: vigorous_goldstine
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: vigorous_goldstine
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: vigorous_goldstine
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: vigorous_goldstine
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: vigorous_goldstine
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: vigorous_goldstine
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: vigorous_goldstine
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T21:14:05+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: inspiring_gates
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: inspiring_gates
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: inspiring_gates
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_gates
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_gates
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: inspiring_gates
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: inspiring_gates
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: inspiring_gates
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: inspiring_gates
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: inspiring_gates
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: inspiring_gates
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: inspiring_gates
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T21:15:45+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: inspiring_gates
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: inspiring_gates
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: inspiring_gates
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_gates
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_gates
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: inspiring_gates
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: inspiring_gates
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: inspiring_gates
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: inspiring_gates
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: inspiring_gates
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: inspiring_gates
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: inspiring_gates
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T21:16:35+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: inspiring_gates
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 49982357f20a
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: inspiring_gates
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: inspiring_gates
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_gates
[1;31m[WARN][0m       * Container running without CPU restrictions: inspiring_gates
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: inspiring_gates
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: inspiring_gates
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: inspiring_gates
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: inspiring_gates
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: inspiring_gates
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: inspiring_gates
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: inspiring_gates
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-04T21:30:24+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: [alpine:3.13]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-10-04T22:14:38+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;34m[INFO][0m 4.1  - Ensure that a user for the container has been created
[1;34m[INFO][0m      * No containers running
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: [alpine:3.13]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;34m[INFO][0m   * No containers running, skipping Section 5


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 11
Initializing 2021-10-05T07:00:51+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: sad_solomon
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: [test:latest]
[1;31m[WARN][0m      * No Healthcheck found: [php:7.4-fpm-alpine3.14]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: sad_solomon
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: sad_solomon
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: sad_solomon
[1;31m[WARN][0m       * Container running without CPU restrictions: sad_solomon
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: sad_solomon
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: sad_solomon
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: sad_solomon
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: sad_solomon
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: sad_solomon
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: sad_solomon
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: sad_solomon
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-05T11:11:25+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: jolly_swartz
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 558db7397769
[1;31m[WARN][0m      * No Healthcheck found: [php:7.4-fpm-alpine3.14]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: jolly_swartz
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: jolly_swartz
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: jolly_swartz
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: jolly_swartz
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: jolly_swartz
[1;32m[PASS][0m 5.19  - A shared mount is replicated at all mounts and changes made at any mount point are
propagated to all other mount points.
Mounting a volume in shared mode does not restrict any other container from mounting
and making changes to that volume.
As this is likely not a desirable option from a security standpoint, this feature should not be
used unless explicitly required.Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: jolly_swartz
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: jolly_swartz
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: jolly_swartz
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: jolly_swartz
[1;32m[PASS][0m 5.30  - User namespaces ensure that a root process inside the container will be mapped to a non-
root process outside the container. Sharing the user namespaces of the host with the
container does not therefore isolate users on the host from users in the containers.Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - If the Docker socket is mounted inside a container it could allow processes running within
the container to execute Docker commands which would effectively allow for full control of
the host.Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-05T11:21:28+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: jolly_swartz
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 558db7397769
[1;31m[WARN][0m      * No Healthcheck found: [php:7.4-fpm-alpine3.14]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: jolly_swartz
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: jolly_swartz
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: jolly_swartz
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: jolly_swartz
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: jolly_swartz
[1;32m[PASS][0m 5.19  - A shared mount is replicated at all mounts and changes made at any mount point are propagated to all other mount points. Mounting a volume in shared mode does not restrict any other container from mounting and making changes to that volume. As this is likely not a desirable option from a security standpoint, this feature should not be used unless explicitly required.Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: jolly_swartz
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: jolly_swartz
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: jolly_swartz
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: jolly_swartz
[1;32m[PASS][0m 5.30  - User namespaces ensure that a root process inside the container will be mapped to a non-
root process outside the container. Sharing the user namespaces of the host with the
container does not therefore isolate users on the host from users in the containers.Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - If the Docker socket is mounted inside a container it could allow processes running within
the container to execute Docker commands which would effectively allow for full control of
the host.Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-05T11:31:50+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: jolly_swartz
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 558db7397769
[1;31m[WARN][0m      * No Healthcheck found: [php:7.4-fpm-alpine3.14]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: jolly_swartz
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: jolly_swartz
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: jolly_swartz
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: jolly_swartz
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: jolly_swartz
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: jolly_swartz
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: jolly_swartz
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: jolly_swartz
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: jolly_swartz
[1;32m[PASS][0m 5.30  - User namespaces ensure that a root process inside the container will be mapped to a non-root process outside the container. Sharing the user namespaces of the host with the container does not therefore isolate users on the host from users in the containers.Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - If the Docker socket is mounted inside a container it could allow processes running within
the container to execute Docker commands which would effectively allow for full control of
the host.Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-05T11:32:47+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: jolly_swartz
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 558db7397769
[1;31m[WARN][0m      * No Healthcheck found: [php:7.4-fpm-alpine3.14]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: jolly_swartz
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: jolly_swartz
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: jolly_swartz
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: jolly_swartz
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: jolly_swartz
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: jolly_swartz
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: jolly_swartz
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: jolly_swartz
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: jolly_swartz
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
Initializing 2021-10-05T11:33:25+02:00


[1;33mSection A - Check results

[1;34m[INFO][0m 4 - Container Images and Build File
[1;31m[WARN][0m 4.1  - Ensure that a user for the container has been created
[1;31m[WARN][0m      * Running as root: jolly_swartz
[1;33m[NOTE][0m 4.2  - Ensure that containers use only trusted base images
[1;33m[NOTE][0m 4.3  - Ensure that unnecessary packages are not installed in the container
[1;33m[NOTE][0m 4.4  - Ensure images are scanned and rebuilt to include security patches
[1;31m[WARN][0m 4.5  - Ensure Content trust for Docker is Enabled
[1;31m[WARN][0m 4.6  - Ensure that HEALTHCHECK instructions have been added to container images
[1;31m[WARN][0m      * No Healthcheck found: 558db7397769
[1;31m[WARN][0m      * No Healthcheck found: [php:7.4-fpm-alpine3.14]
[1;32m[PASS][0m 4.7  - Ensure update instructions are not used alone in the Dockerfile
[1;33m[NOTE][0m 4.8  - Ensure setuid and setgid permissions are removed
[1;32m[PASS][0m 4.9  - Ensure that COPY is used instead of ADD in Dockerfiles
[1;33m[NOTE][0m 4.10  - Ensure secrets are not stored in Dockerfiles
[1;33m[NOTE][0m 4.11  - Ensure only verified packages are are installed

[1;34m[INFO][0m 5 - Container Runtime
[1;32m[PASS][0m 5.1  - Ensure that, if applicable, an AppArmor Profile is enabled
[1;31m[WARN][0m 5.2  - Ensure that, if applicable, SELinux security options are set
[1;31m[WARN][0m      * No SecurityOptions Found: jolly_swartz
[1;32m[PASS][0m 5.3  - Ensure that Linux kernel capabilities are restricted within containers
[1;32m[PASS][0m 5.4  - Ensure that privileged containers are not used
[1;32m[PASS][0m 5.5  - Ensure sensitive host system directories are not mounted on containers
[1;32m[PASS][0m 5.6  - Ensure sshd is not run within containers
[1;32m[PASS][0m 5.7  - Ensure privileged ports are not mapped within containers
[1;33m[NOTE][0m 5.8  - Ensure that only needed ports are open on the container
[1;32m[PASS][0m 5.9  - Ensure that the host's network namespace is not shared
[1;31m[WARN][0m 5.10  - Ensure that the memory usage for containers is limited
[1;31m[WARN][0m       * Container running without memory restrictions: jolly_swartz
[1;31m[WARN][0m 5.11  - Ensure that CPU priority is set appropriately on containers
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m       * Container running without CPU restrictions: jolly_swartz
[1;31m[WARN][0m 5.12  - Ensure that the container's root filesystem is mounted as read only
[1;31m[WARN][0m       * Container running with root FS mounted R/W: jolly_swartz
[1;32m[PASS][0m 5.13  - Ensure that incoming container traffic is bound to a specific host interface
[1;31m[WARN][0m 5.14  - Ensure that the 'on-failure' container restart policy is set to '5'
[1;31m[WARN][0m       * MaximumRetryCount is not set to 5: jolly_swartz
[1;32m[PASS][0m 5.15  - Ensure that the host's process namespace is not shared
[1;32m[PASS][0m 5.16  - Ensure that the host's IPC namespace is not shared
[1;32m[PASS][0m 5.17  - Ensure that host devices are not directly exposed to containers
[1;34m[INFO][0m 5.18  - Ensure that the default ulimit is overwritten at runtime if needed
[1;34m[INFO][0m       * Container no default ulimit override: jolly_swartz
[1;32m[PASS][0m 5.19  - Ensure mount propagation mode is not set to shared
[1;32m[PASS][0m 5.20  - Ensure that the host's UTS namespace is not shared 
[1;32m[PASS][0m 5.21  - Ensurethe default seccomp profile is not Disabled 
[1;33m[NOTE][0m 5.22  - Ensure that docker exec commands are not used with the privileged option 
[1;33m[NOTE][0m 5.23  - Ensure that docker exec commands are not used with the user=root option 
[1;32m[PASS][0m 5.24  - Ensure that cgroup usage is confirmed 
[1;31m[WARN][0m 5.25  - Ensure that the container is restricted from acquiring additional privileges 
[1;31m[WARN][0m       * Privileges not restricted: jolly_swartz
[1;31m[WARN][0m 5.26  - Ensure that container health is checked at runtime 
[1;31m[WARN][0m       * Health check not set: jolly_swartz
[1;34m[INFO][0m 5.27  - Ensure that Docker commands always make use of the latest version of their image 
[1;31m[WARN][0m 5.28  - Ensure that the PIDs cgroup limit is used
[1;31m[WARN][0m       * PIDs limit not set: jolly_swartz
[1;34m[INFO][0m 5.29  - Ensure that Docker's default bridge docker0 is not used 
[1;34m[INFO][0m       * Container in docker0 network: jolly_swartz
[1;32m[PASS][0m 5.30  - Ensure that the host's user namespaces are not shared
[1;32m[PASS][0m 5.31  - Ensure that the Docker socket is not mounted inside any containers


[1;33mSection C - Checks[0m

[1;34m[INFO][0m Checks: 42
